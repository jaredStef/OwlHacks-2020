c(length(x2),mean(x2), sd(x2))
out2 <- t.test(x1,x2)
out2
tv2 = out2$statistic
tv2 = as.numeric(tv2[1])
TestPlot(tv2,length(x1)+length(x2)-2,alpha=.10,title='Chart 2 -- t distribution')
## Test 3
##  -- two proprotions computed from s1, s2
x = RandomSet(3)
s1 = x[1]
s2 = x[2]
n = x[3]
p1 = s1/n
p2 = s2/n
ph = (s1+s2)/(n+n)
se = sqrt(ph*(1-ph)*(1/n+1/n))
z_stat = abs(p1-p2)/se
pz = 2*(1-pnorm(z_stat))
print('Test 3')
print("Proportions")
print(c(s1,s2,n))
print(c(p1,p2))
print("Test statistic and p-value")
print(c(z_stat,pz))
TestPlot(z_stat,alpha=.025,title='Chart 3 -- Normal distribution')
## Test 1
##  -- sample vs null of population mean = 0
x = RandomSet(1)
x
c(length(x),mean(x), sd(x))
out1 <- t.test(x)
print('Test 1')
out1
tv1 = out1$statistic
tv1 = as.numeric(tv1[1])
TestPlot(tv1,length(x)-1, alpha=.05, title='Chart 1 -- t distribution')
## To force the same random draws every run,
## set seed to your favorite number
set.seed(123)
## Test 1
##  -- sample vs null of population mean = 0
x = RandomSet(1)
x
c(length(x),mean(x), sd(x))
out1 <- t.test(x)
print('Test 1')
out1
tv1 = out1$statistic
tv1 = as.numeric(tv1[1])
TestPlot(tv1,length(x)-1, alpha=.05, title='Chart 1 -- t distribution')
## To force the same random draws every run,
## set seed to your favorite number
set.seed(123)
## Test 1
##  -- sample vs null of population mean = 0
x = RandomSet(1)
x
c(length(x),mean(x), sd(x))
out1 <- t.test(x)
print('Test 1')
out1
tv1 = out1$statistic
tv1 = as.numeric(tv1[1])
TestPlot(tv1,length(x)-1, alpha=.05, title='Chart 1 -- t distribution')
## Test 1
##  -- sample vs null of population mean = 0
x = RandomSet(1)
x
c(length(x),mean(x), sd(x))
out1 <- t.test(x)
print('Test 1')
out1
tv1 = out1$statistic
tv1 = as.numeric(tv1[1])
TestPlot(tv1,length(x)-1, alpha=.05, title='Chart 1 -- t distribution')
## Test 1
##  -- sample vs null of population mean = 0
x = RandomSet(1)
x
c(length(x),mean(x), sd(x))
out1 <- t.test(x)
print('Test 1')
out1
tv1 = out1$statistic
tv1 = as.numeric(tv1[1])
TestPlot(tv1,length(x)-1, alpha=.05, title='Chart 1 -- t distribution')
## Test 1
##  -- sample vs null of population mean = 0
x = RandomSet(1)
x
c(length(x),mean(x), sd(x))
out1 <- t.test(x)
print('Test 1')
out1
tv1 = out1$statistic
tv1 = as.numeric(tv1[1])
TestPlot(tv1,length(x)-1, alpha=.05, title='Chart 1 -- t distribution')
## Test 1
##  -- sample vs null of population mean = 0
x = RandomSet(1)
x
c(length(x),mean(x), sd(x))
out1 <- t.test(x)
print('Test 1')
out1
tv1 = out1$statistic
tv1 = as.numeric(tv1[1])
TestPlot(tv1,length(x)-1, alpha=.05, title='Chart 1 -- t distribution')
## Test 1
##  -- sample vs null of population mean = 0
x = RandomSet(1)
x
c(length(x),mean(x), sd(x))
out1 <- t.test(x)
print('Test 1')
out1
tv1 = out1$statistic
tv1 = as.numeric(tv1[1])
TestPlot(tv1,length(x)-1, alpha=.05, title='Chart 1 -- t distribution')
## Test 2
##  -- create 2 samples
x = RandomSet(2)
print('Test 1')
out1
tv1 = out1$statistic
tv1 = as.numeric(tv1[1])
TestPlot(tv1,length(x)-1, alpha=.05, title='Chart 1 -- t distribution')
## Test 2
##  -- create 2 samples
x = RandomSet(2)
x1 = as.vector(unlist(x[1]))
## Test 1
##  -- sample vs null of population mean = 0
x = RandomSet(1)
x
c(length(x),mean(x), sd(x))
out1 <- t.test(x)
print('Test 1')
out1
tv1 = out1$statistic
tv1 = as.numeric(tv1[1])
TestPlot(tv1,length(x)-1, alpha=.05, title='Chart 1 -- t distribution')
## Test 2
##  -- create 2 samples
x = RandomSet(2)
x1 = as.vector(unlist(x[1]))
## Test 1
##  -- sample vs null of population mean = 0
x = RandomSet(1)
x
c(length(x),mean(x), sd(x))
out1 <- t.test(x)
print('Test 1')
out1
tv1 = out1$statistic
tv1 = as.numeric(tv1[1])
TestPlot(tv1,length(x)-1, alpha=.05, title='Chart 1 -- t distribution')
## Test 1
##  -- sample vs null of population mean = 0
x = RandomSet(1)
x
c(length(x),mean(x), sd(x))
out1 <- t.test(x)
print('Test 1')
out1
tv1 = out1$statistic
tv1 = as.numeric(tv1[1])
TestPlot(tv1,length(x)-1, alpha=.05, title='Chart 1 -- t distribution')
install.packages("zoo")
date1 = as.Date('2020-04-01')
str(date1)
date1
date1-7
x = seq(1,10)
x
a = ts(x)
a
date1 = as.Date('2020-01-01')
b = ts(x,start=date1,frequency = 12, name='x')
b
plot(b)
## Adding NAs  Not Available
x[11] = NA
x[12] = NA
b2 = ts(x,start=date1,frequency = 12, name='x')
b2
is.na(b2)
plot(b2)
ts.plot(b2/2)
# Lagging
lag(x)
lag(b)
stats::lag(b,k=1)
b2 <- zoo(b)
lag(b2,k=1)
date1 = as.Date('2020-04-01')
str(date1)
date1
date1-7
x = seq(1,10)
x
a = ts(x)
a
date1 = as.Date('2020-01-01')
b = ts(x,start=date1,frequency = 12, name='x')
b
plot(b)
## Adding NAs  Not Available
x[11] = NA
x[12] = NA
b2 = ts(x,start=date1,frequency = 12, name='x')
b2
is.na(b2)
plot(b2)
ts.plot(b2/2)
# Lagging
lag(x)
lag(b)
stats::lag(b,k=1)
b2 <- zoo(b)
lag(b2,k=1)
library(zoo)
## Adding NAs  Not Available
x[11] = NA
x[12] = NA
b2 = ts(x,start=date1,frequency = 12, name='x')
b2
is.na(b2)
plot(b2)
ts.plot(b2/2)
# Lagging
lag(x)
lag(b)
stats::lag(b,k=1)
b2 <- zoo(b)
lag(b2,k=1)
#Compute Percentage change
bpch = diff(b2)/lag(b2)
str(bpch)
bpch
pch <- function(x) {
x / lag(x,k=1) - 1
}
bpch2 = pch(b2)
?lag
lag(b2,k=1)
x = seq(1,10)
y = c(1,3,4,2,6,5,3,3,4,6)
plot(x,y)
plot(x, y, type='b', ylim=c(0,7))
#add to plot]
title(main='My Plot')
mtext('What is this showing?', side=1, at = 1)
##Blank canvas
plot(x, y, type='n',  ylim=c(0,7), , xlab="", ylab="")
title(main='My Plot')
title(xlab='Observation Number')
##add line
lines(x,y)
polygon(x=c(2,5), y=c(1,3), col='yellow')
polygon(x=c(2,5,5), y=c(1,3,1), col='yellow')
polygon(x=c(x[2], x[3], x[4]), y=c(0,y[3],0), col='red')
xa = c(x[2],x[2],x[3],x[4],x[4])
ya = c(0, y[2], y[3], y[4], 0)
polygon(x=xa, y=ya, col='black')
?circle
?mtext
??circle
predict_rate('downey')
library(predictrace)
library(predictrace)
predict_rate('downey')
predict_race('downey')
predict_race('stefanowicz')
predict_race('croop')
predict_race('kemp')
predict_race('obama')
predict_race('domzalski')
predict_race('holodick')
predict_race('hollodick')
predict_race('secoy')
predict_race('sackman')
predict_race('coleman')
predict_race('connelly')
predict_race('trump')
predict_race('healy')
predict_race('brown')
predict_race('crocker')
predict_race('walker')
predict_race('black')
predict_race('wallace')
predict_race('williams')
predict_race('johnson')
predict_race('garcia')
predict_race('martinez')
predict_race('lopez')
predict_race('jackson')
predict_race('seven')
predict_race('robinson')
predict_race('jared')
#
pop <- read.csv('population_by_zip_2010.csv')
pop
setwd('~/Downloads/OwlHacks\ Proj')
library(purrr)
library(predictrace)
library(dplyr)
data <- read.csv('all.csv')
dfDemo <- read.csv('counties.csv')
unique(data$bail_type)
unique(data$case_status)
plot(data$prelim_hearing_time)
#
pop <- read.csv('population_by_zip_2010.csv')
pop
pop %>% group_by(zipcode)
pop %>% group_by(zipcode) %>% filter(zipcode >= 19100 & zipcode <= 19199)
pop %>% group_by(zipcode) %>% filter(zipcode == 19121)
pop %>% group_by(zipcode, population) %>% filter(zipcode == 19121)
library(purrr)
library(predictrace)
library(dplyr)
data <- read.csv('all.csv')
names <- vector()
for (name in strsplit(unique(data$arresting_officer), ',')) {
names <- append(unlist(name)[1], names)
}
bail_names <- vector()
strsplit(data$bail_set_by, ',')
for (name in unique(strsplit(data$bail_set_by, ',')) {
for (name in unique(strsplit(data$bail_set_by, ','))) {
bail_names <- append(unlist(name)[1], bail_names)
}
bail_pred <- predict_race(bail_names, probability = T) %>% filter(!is.na(likely_race))
prediction <- predict_race(names, probability = T) %>% filter(!is.na(likely_race))
a <- colSums(prediction[4:9],)
b <- colSums(bail_pred[4:9])
barplot(table(a$likely_race))
bail_names
bail_pred$likely_race
barplot(a)
barplot(b)
barplot(a)
# x is column of names, u is unique bool
nameProbs <- function (x, u) {
retVals <- vector()
looper <- strsplit(x, ',')
if (u) {
looper <- unique(looper)
}
for (name in looper) {
retVals <- append(unlist(name)[1], retVals)
}
return(retVals)
}
# x is column of names, u is unique bool
nameProbs <- function (x, u) {
retVals <- vector()
looper <- strsplit(x, ',')
if (u) {
looper <- unique(looper)
}
for (name in looper) {
retVals <- append(unlist(name)[1], retVals)
}
return(predict_race(retVals) %>% filter(!is.na(likely_race)))
}
nameProbs(data$bail_set_by, TRUE)
barplot(nameProbs(data$bail_set_by, TRUE))
barplot(colSums(nameProbs(data$bail_set_by, TRUE)))
barplot(colSums(nameProbs(data$bail_set_by, TRUE)[4:9]))
barplot(colSums(nameProbs(data$bail_set_by, TRUE)[4:9]))
barplot(colSums(nameProbs(data$bail_set_by, TRUE)[4:9]))
barplot(colSums(nameProbs(data$arresting_officer, TRUE)[4:9]))
barplot(colSums(nameProbs(data$bail_set_by, TRUE)[4:9]))
# Predicted race of ppl setting bail unweighted
barplot(colSums(nameProbs(data$bail_set_by, TRUE)[4:9]))
# Predicted race of ppl setting bail weighted by # of occurances
barplot(colSums(nameProbs(data$bail_set_by, FALSE)[4:9]))
# Predicted race of arresting officer unweighted
barplot(colSums(nameProbs(data$arresting_officer, TRUE)[4:9]))
# Predicted race of arresting officer weighted by occurances
barplot(colSums(nameProbs(data$arresting_officer, FALSE)[4:9]))
# Predicted race of ppl setting bail unweighted
barplot(colSums(nameProbs(data$bail_set_by, TRUE)[4:9]))
# Predicted race of ppl setting bail weighted by # of occurances
barplot(colSums(nameProbs(data$bail_set_by, FALSE)[4:9]))
# Predicted race of arresting officer unweighted
barplot(colSums(nameProbs(data$arresting_officer, TRUE)[4:9]))
# Predicted race of arresting officer weighted by occurances
barplot(colSums(nameProbs(data$arresting_officer, FALSE)[4:9]))
unique(data$bail_set_by)
# Predicted race of ppl setting bail unweighted
barplot(
colSums(nameProbs(data$bail_set_by, TRUE)[4:9]),
xlab = 'Predicted Race',
ylab = 'Person Count',
names.arg = c('Native American', '', 'African-American', '?', 'White', '?')
)
colSums(nameProbs(data$bail_set_by, TRUE)[4:9])
# Predicted race of ppl setting bail unweighted
barplot(
colSums(nameProbs(data$bail_set_by, TRUE)[4:9]),
xlab = 'Predicted Race',
ylab = 'Person Count',
names.arg = c('Native American', 'Asian', 'African-American', 'Hispanic', 'White', '2+')
)
# Predicted race of ppl setting bail weighted by # of occurances
barplot(
colSums(nameProbs(data$bail_set_by, FALSE)[4:9]),
xlab = 'Predicted Race',
ylab = 'Person Count',
names.arg = race_strings
)
# Predicted race of ppl setting bail weighted by # of occurances
barplot(
colSums(nameProbs(data$bail_set_by, FALSE)[4:9]),
xlab = 'Predicted Race',
ylab = 'Person Count',
names.arg = race_strings
)
race_strings <- c('Native American', 'Asian', 'African-American', 'Hispanic', 'White', '2+')
# Predicted race of ppl setting bail weighted by # of occurances
barplot(
colSums(nameProbs(data$bail_set_by, FALSE)[4:9]),
xlab = 'Predicted Race',
ylab = 'Person Count',
names.arg = race_strings
)
# Predicted race of ppl setting bail weighted by # of occurances
barplot(
colSums(nameProbs(data$bail_set_by, FALSE)[4:9]),
xlab = 'Predicted Race',
ylab = 'Bails Set',
names.arg = race_strings
)
phila_race_dem <- c(
c('Black', 'White', 'Hispanic', 'Asian', 'Islander', 'Native American', '2+'),
c(0.426, 0.416, 0.141, 0.071, 0.0005, 0.004, 0.028))
plot(phila_race_dem)
barplot(phila_race_dem)
phila_race_dem <- data.frame(
c('Black', 'White', 'Hispanic', 'Asian', 'Islander', 'Native American', '2+'),
c(0.426, 0.416, 0.141, 0.071, 0.0005, 0.004, 0.028))
phila_race_dem
plot(phila_race_dem)
barplot(phila_race_dem)
phila_race_dem <- data.frame(
'race' = c('Black', 'White', 'Hispanic', 'Asian', 'Islander', 'Native American', '2+'),
'percentage' = c(0.426, 0.416, 0.141, 0.071, 0.0005, 0.004, 0.028))
phila_race_dem
plot(phila_race_dem)
barplot(phila_race_dem)
plot(phila_race_dem$race, phila_race_dem$percentage)
barplot(phila_race_dem$percentage)
barplot(phila_race_dem$percentage, xlab = phila_race_dem$race)
barplot(phila_race_dem$percentage, xlab = phila_race_dem$race)
barplot(phila_race_dem$percentage, names.arg = phila_race_dem$race)
# Predicted race of ppl setting bail weighted by # of occurances
barplot(
colSums(nameProbs(data$bail_set_by, FALSE)[4:9]),
xlab = 'Predicted Race',
ylab = 'Bails Set',
names.arg = race_strings
)
# Predicted race of arresting officer unweighted
barplot(colSums(nameProbs(data$arresting_officer, TRUE)[4:9]))
# Predicted race of arresting officer weighted by occurances
barplot(colSums(nameProbs(data$arresting_officer, FALSE)[4:9]))
unique(data$arresting_officer)
nrows(unique(data$arresting_officer))
nrow(unique(data$arresting_officer))
nrow(unique(data$arresting_officer))
nrow(unique(data$arresting_officer))
NROW(unique(data$arresting_officer))
# Predicted race of arresting officer weighted by occurances
barplot(colSums(nameProbs(data$arresting_officer, FALSE)[4:9]))
library(purrr)
library(predictrace)
library(dplyr)
data <- read.csv('all.csv')
# Thx Wikipedia
phila_race_dem <- data.frame(
'race' = c('Black', 'White', 'Hispanic', 'Asian', 'Islander', 'Native American', '2+'),
'percentage' = c(0.426, 0.416, 0.141, 0.071, 0.0005, 0.004, 0.028))
# x is column of names, u is unique bool
nameProbs <- function (x, u) {
retVals <- vector()
looper <- strsplit(x, ',')
if (u) {
looper <- unique(looper)
}
for (name in looper) {
retVals <- append(unlist(name)[1], retVals)
}
return(predict_race(retVals) %>% filter(!is.na(likely_race)))
}
# Predicted race of ppl setting bail unweighted
bail_unw <- colSums(nameProbs(data$bail_set_by, TRUE)[4:9])
# Predicted race of ppl setting bail weighted by # of occurances
bail_w <- colSums(nameProbs(data$bail_set_by, FALSE)[4:9])
# Predicted race of arresting officer unweighted
off_unw <-colSums(nameProbs(data$arresting_officer, TRUE)[4:9])
# Predicted race of arresting officer weighted by occurances
off_w <- colSums(nameProbs(data$arresting_officer, FALSE)[4:9])
bail_unw
write.csv(bail_unw, 'bail_unw.csv')
write.csv(bail_unw, 'bail_unw.csv')
write.csv(bail_w, 'bail_w.csv')
write.csv(off_unw, 'off_unw.csv')
write.csv(off_w, 'off_w.csv')
write.csv(phila_race_dem, 'phila_race_dem.csv')
